version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
     
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Mjdm6rkvNJCHFC6q57wwGm/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [ $SUCCESS == 1 ]
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi
         
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm update js-yaml --depth 4
            npm update minimist --depth 4
            npm update loader-utils --depth 2
            npm update json5 --depth 3
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm install passport-jwt@4.0.1
            npm update path-parse --depth 3
            npm update mkdirp --depth 2
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            
      - run:
          name: Add backend ip address to Ansible inventory
          command: |
            public_ip=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $public_ip >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt


      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # we'll add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:7c:ea:a7:12:48:31:f0:fd:31:7c:67:b9:ac:59:e4"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - install_ansible

      - run:
          name: configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          # no_output_timeout: 30m

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install --no-audit
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Mjdm6rkvNJCHFC6q57wwGm/migration_{CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_awscli
      - install_nodejs
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["41:d6:55:0e:ea:d7:fc:c6:96:a2:61:e2:d1:16:b2:af"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
            # yum install -y tar gzip
            # yum install ansible -y

      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
            
      - run:
          name: Deploy backend
          command: |
            cd backend

            touch .env
            echo ENVIRONMENT=production > '.env'
            echo TYPEORM_CONNECTION=postgres >> '.env'
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> '.env'
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> '.env'
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> '.env'
            echo MODE_ENV=production >> '.env'
            echo TYPEORM_HOST=$TYPEORM_HOST >> '.env'
            echo TYPEORM_PORT=$TYPEORM_PORT >> '.env'
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> '.env'
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> '.env'
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> '.env'

            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is.."
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
      # - install_ansible
      # - install_nodejs         
      - run:
          name: Backend smoke test
          command: |
            # sudo apt install curl -y
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl --connect-timeout 5 "${API_URL}/api/status" -v | grep "ok"
            then 
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com
            if curl -s $FRONTEND_WEBSITE -v | grep "Welcome"
            then
              return 1
            else
              return 1
            fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar curl gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update Cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "${OldWorkflowID}" >> ~/OldWorkflowID.txt
            echo "printing workflow ID"
            echo "${OldWorkflowID}"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name Cloudfront \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \

      - destroy-environment
      - revert-migrations

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get Old stack ID, remove the old bucket and stacks
  #         command: |
  #           # Old workflow ID
  #           export OldWorkflowID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  # --profile idiot
  #               --no-paginate --output text)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

  #           # Fetch the stack names
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \ --profile idiot
  #           --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           STACKSID=($(aws cloudformation describe-stacks --query "Stacks[*].Outputs[?OutputKey==\`ID\`].OutputValue" --no-paginate --output text))
  #           echo Stack ids: "${STACKSID[@]}"
  #           echo Stack names: "${STACKS[@]}"
  #           echo $OldWorkflowID ${CIRCLE_WORKFLOW_ID:0:7}

  #           for (( index=0; index<${#STACKS[@]}; index+=2 )) 
  #           do
  #             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
  #             then
  #               echo "----------Deletes cofirmed------------"
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" --profile idiot
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" 
  #             else
  #               echo "----------Cannot cleanup------------"
  #             fi
  #           done
  #     - destroy-environment
  #     - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]